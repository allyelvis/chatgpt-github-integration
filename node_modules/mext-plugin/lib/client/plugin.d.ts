import { init, modifyInitialPropsCtx, routeChangeBeforeLoadInitialProps, rendered, catchError } from '../../types/client';
export interface BasicHook {
    init: init;
    rendered: rendered;
    modifyInitialPropsCtx: modifyInitialPropsCtx;
    catchError: catchError;
}
export interface RouterHook {
    routeChangeBeforeLoadInitialProps: routeChangeBeforeLoadInitialProps;
}
declare class Plugin {
    private __plugin__self__hooks__;
    private __plugin__name__;
    /**
     * 插件动态变量对象
     */
    options: any;
    protected constructor(hooks: any, options: any, name: string);
    private method;
    /**
     * 执行客户端运行阶段的钩子函数
     *
     * `init`
     *
     * `rendered`
     *
     * `modifyInitialPropsCtx`
     *
     * `catchError`
     */
    basic(callback: (hooks: BasicHook) => void): void;
    /**
     * 执行客户端路由切换阶段的钩子函数
     *
     * `routeChangeBeforeLoadInitialProps`
     *
     */
    router(callback: (hooks: RouterHook) => void): void;
}
export default Plugin;
