'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

const _1 = require('./');

const utils_1 = require('../utils');

class Plugin {
  constructor(hooks, options = {}, name) {
    /**
     * 插件动态变量对象
     */
    this.options = {};
    this.__plugin__self__hooks__ = hooks;
    this.__plugin__name__ = name;
    this.options = options;
  }

  method(callback, methodName) {
    const self = this;
    const obj = {};

    _1.default.names[methodName].forEach(name => {
      const { name: fnName } = utils_1.parseAsync(name);

      obj[fnName] = function() {
        self.__plugin__self__hooks__[fnName](...arguments);
      };
    });

    try {
      callback(obj);
    } catch (error) {
      console.error(`[ plugin-name: ${this.__plugin__name__} ] 客户端注册插件时发生错误\n${error}`);
    }
  }
  /**
   * 执行客户端运行阶段的钩子函数
   *
   * `init`
   *
   * `rendered`
   *
   * `modifyInitialPropsCtx`
   *
   * `catchError`
   */

  basic(callback) {
    this.method(callback, 'basic');
  }
  /**
   * 执行客户端路由切换阶段的钩子函数
   *
   * `routeChangeBeforeLoadInitialProps`
   *
   */

  router(callback) {
    this.method(callback, 'router');
  }
}

exports.default = Plugin;
