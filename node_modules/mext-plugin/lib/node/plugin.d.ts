import { Middlewares, modifyContextMext, modifyInitialPropsCtx, willCache, willFetch, didFetch, beforeRender, renderToStringComponent, afterRender, beforeBuild, afterBuild, webpackConfig, babelConfig, webpackCompiler, document, source } from '../../types/node';
export interface ServerHooks {
    /**
     * 在mext内部的核心中间件之前注入中间件的hook函数
  
  | 参数        | 说明                             | 类型    |
  | ----------- | -------------------------------- | ------- |
  | middlewares | 存储中间件的数组结构，原型链操作 | Array   |
  | config      | 当前项目的mext配置              | object  |
  | port        | 当前服务端口                     | string  |
  | dev         | 当前配置运行环境，开发、生产     | boolean |
     */
    beforeCoreMiddlewares: Middlewares;
    /**
     * 在mext内部的核心中间件之后注入中间件的hook函数
  
  | 参数        | 说明                             | 类型    |
  | ----------- | -------------------------------- | ------- |
  | middlewares | 存储中间件的数组结构，原型链操作 | Array   |
  | config      | 当前项目的mext配置              | object  |
  | port        | 当前服务端口                     | string  |
  | dev         | 当前配置运行环境，开发、生产     | boolean |
     */
    afterCoreMiddlewares: Middlewares;
    /**
     * 修改ctx.mext的变量结构，原则上只允许添加，不允许删除
  
  | 参数    | 说明                      | 类型   |
  | ------- | ------------------------- | ------ |
  | context | 服务端的`koa`的上下文对象 | object |
     */
    modifyContextMext: modifyContextMext;
    /**
     *修改在服务端运行时，当执行`getInitialProps`函数时，处理该函数接收到的参数
  
  | 参数    | 说明                      | 类型   |
  | ------- | ------------------------- | ------ |
  | context | 服务端的`koa`的上下文对象 | object |
  | params  | 服务端默认传递的参数内容  | object |
     */
    modifyInitialPropsCtx: modifyInitialPropsCtx;
    /**
     * 在服务端处理缓存之前，触发该函数
  
  | 参数    | 说明                      | 类型   |
  | ------- | ------------------------- | ------ |
  | context | 服务端的`koa`的上下文对象 | object |
     */
    willCache: willCache;
    /**
     * 在服务器获取数据之前，触发该函数
  
  | 参数    | 说明                      | 类型   |
  | ------- | ------------------------- | ------ |
  | context | 服务端的`koa`的上下文对象 | object |
     */
    willFetch: willFetch;
    /**
     * 在服务端获取完数据之后，触发该函数
  
  |   参数    | 说明                      | 类型   |
  | ------- | ------------------------- | ------ |
  | context | 服务端的`koa`的上下文对象 | object |
     */
    didFetch: didFetch;
}
export interface RenderHooks {
    /**
     *  mext在服务端渲染之前，即在执行`renderToString`函数之前一行
  
   | 参数    | 说明                      | 类型   |
   | ------- | ------------------------- | ------ |
   | context | 服务端的`koa`的上下文对象 | object |
     */
    beforeRender: beforeRender;
    /**
     * 执行`renderToString`函数所接受的参数
  
   | 参数      | 说明                          | 类型          |
   | --------- | ----------------------------- | ------------- |
   | context   | 服务端的`koa`的上下文对象     | object        |
   | Component | renderToString接受的react组件 | React.Element |
     */
    render: renderToStringComponent;
    /**
     * mext在服务端渲染，或者在导出单页应用时，对document进行整理
     *
     */
    document: document;
    /**
     * mext在服务端渲染之后，即在执行`renderToString`函数之后一行
  
   | 参数         | 说明                                                    | 类型          |
   | ------------ | ------------------------------------------------------- | ------------- |
   | context      | 服务端的`koa`的上下文对象                               | object        |
   | head         | 生成的html文档的头部内容，包括一些样式地址、meta信息等  | React.Element |
   | script       | 生成的html文档的脚本内容，包括类似main.js客户端入口脚本 | React.Element |
   | html         | `renderToString`执行后生成的html字符串                  | string        |
   | initialState | 服务端执行所产生的数据，此数据将提供给客户端渲染        | object        |
     */
    afterRender: afterRender;
}
export interface BuildHooks {
    /**
     * mext项目执行`mext build`构建命令之前
     *
  
  | 参数    | 说明                | 类型                             |
  | ------- | ------------------- | -------------------------------- |
  | run_env | 构建的环境类型      | 'node' 、 'web_ssr' 、 'web_spa' |
  | config  | 当前项目的mext配置 | object                           |
     */
    beforeBuild: beforeBuild;
    /**
     *
     * 处理编译后的静态资源
     *
     */
    source: source;
    /**
     * mext项目执行`mext build`构建命令之后
  
  
  | 参数    | 说明                | 类型                             |
  | ------- | ------------------- | -------------------------------- |
  | run_env | 构建的环境类型      | 'node' 、 'web_ssr' 、 'web_spa' |
  | config  | 当前项目的mext配置 | object                           |
     */
    afterBuild: afterBuild;
}
export interface ConfigHooks {
    /**
     * 处理webpack的配置文件
  
  | 参数     | 说明                                              | 类型    |
  | -------- | ------------------------------------------------- | ------- |
  | config   | 当前系统内置的webpack配置                         | object  |
  | isServer | 当前的配置是否应用服务端编译                      | boolean |
  | isMext  | 表示当前是否编译mext项目内文件，即非server端文件 | boolean |
  | dir      | 当前项目的根目录                                  | string  |
  | dev      | 当前配置运行环境，开发、生产                      | boolean |
  | dll      | 表示当前的webpack配置是否应用于dll                | boolean |
     */
    webpackConfig: webpackConfig;
    /**
     * 添加新的babel配置，该钩子只支持同步
     *
  | 参数        | 说明                         | 类型                                               |
  | ----------- | ---------------------------- | -------------------------------------------------- |
  | config      | 当前babel的配置结构          | object { plugins: Array<any>;presets: Array<any>;} |
  | mextConfig | 当前系统内置的webpack配置    | object                                             |
  | isServer    | 当前的配置是否应用服务端编译 | boolean                                            |
  | dev         | 当前配置运行环境，开发、生产 | boolean                                            |
     */
    babelConfig: babelConfig;
}
export interface CompilerHooks {
    /**
     * 处理webpack编译后的compiler
  
  | 参数     | 说明                                              | 类型    |
  | -------- | ------------------------------------------------- | ------- |
  | compiler | webpack编译的对象结构                             | object  |
  | config   | 当前系统内置的webpack配置                         | object  |
  | isServer | 当前的配置是否应用服务端编译                      | boolean |
  | isMext  | 表示当前是否编译mext项目内文件，即非server端文件 | boolean |
  | dir      | 当前项目的根目录                                  | string  |
  | dev      | 当前配置运行环境，开发、生产                      | boolean |
  | dll      | 表示当前的webpack的编译是否对dll进行编译          | boolean |
  
     */
    webpackCompiler: webpackCompiler;
}
export interface DocumentHooks {
    beforeHead: any;
    afterHead: any;
    beforeScript: any;
    afterScript: any;
}
declare class Plugin {
    private __plugin__self__hooks__;
    private __plugin__name__;
    /**
     * 插件动态变量对象
     */
    options: any;
    protected constructor(hooks: any, options: any, name: string);
    private method;
    /**
     * 执行服务端运行阶段的钩子函数
     *
     * 主要对上下文参数的处理、中间件的处理以及数据加载和渲染逻辑的自定义调整
     *
     * `modifyContextMext`
     *
     * `modifyInitialPropsCtx`
     *
     * `willCache`
     *
     * `willFetch`
     *
     * `didFetch`
     *
     * `beforeCoreMiddlewares`
     *
     * `afterCoreMiddlewares`
     */
    server(callback: (hooks: ServerHooks) => void): void;
    /**
     * 渲染阶段触发钩子
     *
     * `beforeRender`
     *
     * `render`
     *
     * `document`
     *
     * `afterRender`
     */
    render(callback: (hooks: RenderHooks) => void): void;
    /**
     * build阶段执行钩子
     *
     * `beforeBuild`
     *
     * `source`
     *
     * `afterBuild`
     */
    build(callback: (hooks: BuildHooks) => void): void;
    /**
     * 自定义处理配置文件
     *
     * `webpackConfig`
     *
     * `babelConfig`
     */
    config(callback: (hooks: ConfigHooks) => void): void;
    /**
     * 处理编译解决的场景，目前有webpack编译阶段的处理
     *
     * `webpackCompiler`
     */
    compiler(callback: (hooks: CompilerHooks) => void): void;
}
export default Plugin;
