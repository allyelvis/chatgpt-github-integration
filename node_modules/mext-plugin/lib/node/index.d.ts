import { INmodifyContextMext, INmodifyInitialPropsCtx, INwillFetch, INwillCache, INdidFetch, IwebpackConfig, IwebpackCompiler, CustomMiddlewares, IbeforeBuild, IafterBuild, IbeforeRender, IrenderToStringComponent, IafterRender, IbabelConfig, Idocument, Isource } from '../../types/node';
declare const _default: {
    hooks: {
        /** 修改ctx.mext的变量结构，原则上只允许添加，不允许删除 */
        modifyContextMext: (params: INmodifyContextMext) => Promise<any>;
        /** 修改服务端运行时`getInitialProps`函数接收的参数 */
        modifyInitialPropsCtx: (params: INmodifyInitialPropsCtx) => Promise<any>;
        /** 即将执行cache中间件，触发该函数 */
        willCache: (params: INwillCache) => Promise<any>;
        /** 即将要开始fetch数据时，触发该函数 */
        willFetch: (params: INwillFetch) => Promise<any>;
        /** 服务端fetch执行后触发 */
        didFetch: (params: INdidFetch) => Promise<any>;
        /** 处理webpack配置文件 */
        webpackConfig: (params: IwebpackConfig) => Promise<any>;
        /** 处理webpack编译后的compiler */
        webpackCompiler: (params: IwebpackCompiler) => Promise<any>;
        /** 在mext内部的核心中间件之前注入中间件的hook函数 */
        beforeCoreMiddlewares: (params: CustomMiddlewares) => Promise<any>;
        /** 在mext内部的核心中间件之后注入中间件的hook函数 */
        afterCoreMiddlewares: (params: CustomMiddlewares) => Promise<any>;
        /** mext项目执行`mext build`构建命令之前 */
        beforeBuild: (params: IbeforeBuild) => Promise<any>;
        /** mext项目执行`mext build`构建命令之后 */
        afterBuild: (params: IafterBuild) => Promise<any>;
        /**  mext在服务端渲染之前，即在执行`renderToString`函数之前一行 */
        beforeRender: (params: IbeforeRender) => Promise<any>;
        /** 执行`renderToString`函数所接受的参数 */
        render: (params: IrenderToStringComponent) => Promise<any>;
        /** mext在服务端渲染之后，即在执行`renderToString`函数之后一行 */
        afterRender: (params: IafterRender) => Promise<any>;
        /** 添加新的babel配置，该钩子只支持同步 */
        babelConfig: (params: IbabelConfig) => void;
        /** 整理document文档结构 */
        document: (params: Idocument) => Promise<any>;
        /** source */
        source: (params: Isource) => Promise<any>;
        /** 处理babel插件include，该钩子只支持同步 */
        babelInclude: (filePath: string) => any;
    };
    register: (plugins: any[]) => void;
    unregister(): void;
    names: {
        server: string[];
        build: string[];
        config: string[];
        compiler: string[];
        render: string[];
    };
};
export default _default;
