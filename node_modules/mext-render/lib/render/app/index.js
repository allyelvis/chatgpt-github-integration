'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

const React = require('react');

const Loadable = require('react-loadable');

const react_router_dom_1 = require('react-router-dom');

const mext_utils_1 = require('mext-utils');

const root_1 = require('./root');

exports.default = ctx => {
  const RootComponent = root_1.default(ctx);
  let locationUrl = ctx.request.url;
  const basename = ctx.mext.config.basename;
  let originalUrl = ctx.originalUrl;

  if (basename) {
    if (new RegExp('^' + basename).test(locationUrl)) {
      locationUrl = basename + locationUrl;
    }

    if (new RegExp('^' + basename).test(originalUrl)) {
      originalUrl = basename + originalUrl;
    }
  }

  return () =>
    React.createElement(
      mext_utils_1.MextContext.Provider,
      {
        value: ctx.mext.initialState.mext || {}
      },
      React.createElement(
        react_router_dom_1.StaticRouter,
        {
          basename: basename,
          location: locationUrl,
          context: {}
        },
        React.createElement(
          mext_utils_1.MextRouterContext.Provider,
          {
            value: {
              cache: ctx.mext.cache,
              routes: ctx.mext.routes,
              match_routes: ctx.mext.match_routes,
              mext_initialState: ctx.mext.initialState,
              location_search: ctx.mext.search,
              match: ctx.mext.match,
              pathname: originalUrl.split('?')[0],
              routerError: () => {
                // 标识路由错误
                ctx.mext.routerError = true;
              }
            }
          },
          React.createElement(
            Loadable.Capture,
            {
              report: moduleName => ctx.mext.modules.push(moduleName)
            },
            React.createElement(RootComponent, null)
          )
        )
      )
    );
};
