'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

const LruCache = require('lru-cache');

exports.pageCache = new LruCache();
const cacheUtil = {
  init(config) {
    exports.pageCache = new LruCache(config);
  },

  _getPath(ctx) {
    try {
      const { match_routes } = ctx.mext;
      const l = match_routes.length;

      if (l) {
        if (typeof match_routes[l - 1] !== 'object') {
          // 什么时候会不是object????
          return match_routes[l - 2].route.path;
        } else {
          return match_routes[l - 1].route.path;
        }
      } else {
        return '_mext'; // 没有设置路由，默认设置_mext进行存储缓存
      }
    } catch (e) {
      // eslint-disable-next-line no-throw-literal
      throw '[pageCache-error]: no routes' + e;
    }
  },

  get(ctx) {
    let html = '';

    const path = this._getPath(ctx);

    if (path) {
      html = exports.pageCache.get(path);
    } // 路径匹配缓存在

    if (html) {
      // 直接读缓存，不做任何计算处理
      console.info(`[hit]${path}`);
      ctx.set('X-Mext-Cache', 'true');
    }

    return html;
  },

  set(ctx, html) {
    const path = this._getPath(ctx);

    console.info(`[cache]: ${path}`);

    if (path) {
      exports.pageCache.set(path, html);
    }
  }
};
exports.default = cacheUtil;
