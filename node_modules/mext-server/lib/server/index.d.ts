/// <reference types="node" />
/**
 * Mext服务端核心代码
 */
import * as https from 'https';
import * as http from 'http';
import Base from './base';
export declare type callback = (listen: http.Server | https.Server, url: string, open: Function) => void;
/**
 * Server初始化构造函数之参数说明
 *
 * @param isMock      标识是否启用mock中间件获取数据
 * @param isProxy     标识是否启用proxy获取数据
 * @param port        指定当前服务器的端口号
 * @param ignore      忽略显示系统默认错误，仅在开发环境生效，主要用于错误页面开发
 * @param apiServer   标识当前的服务器是否仅仅可以作为一个接口数据代理服务，比如可以当作一个mock服务器或者proxy服务器
 */
export declare class Server extends Base {
    /**
     *
     * 开启端口监听
     *
     * 示例
     *
      ```
  
      app.listen(1234, ( listen, url, open ) => {
          // listen 当前koa监听对象
          // url    ip地址+端口 = url
          // open   打开浏览器，比如本地hosts配置 example.com
          open('http://example.com:1234/')
      });
  
      ```
     */
    listen(port?: string | number | callback, cb?: callback | null): Promise<void>;
    /**
     * 初始化listen
     */
    startListen(cb?: callback | null): Promise<void>;
    loadCoreMiddlewares(): void;
    /**
     * 初始化服务端数据，开发环境被重写
     */
    init(): Promise<void>;
    /**
     * 加载自定义中间件，开发环境被重写
     *
     * 返回当前加载中间件的路径
     */
    loadMiddleware(middlewarePath: string, middlewares: Array<any>): string;
    /**
     * 开始创建listen，开发环境被重写
     */
    createServer(cb?: callback | null): Promise<void>;
    /**
     * 开始创建监听
     */
    createListen(): Promise<unknown>;
    /**
     * 创建路由中间件
     */
    createRouter(remove?: Function): void;
}
