/**
 * Server对象的基础类
 */
import * as Koa from 'koa';
import { Seq, List } from 'immutable';
import { IServerEntry, IContext, AComponentType, IConfig } from 'mext-types';
export default class Base {
    dir: string; /** 项目根目录地址 */
    dev: boolean; /** 环境 */
    isMock: boolean; /** 是否开启mock */
    isProxy: boolean; /** 是否开启代理 */
    port: string | number; /** 端口 */
    apiServer: boolean; /** 当前网站仅仅作为一个api，即只需要添加mock或者proxy中间件 */
    app: Koa; /** koa的app对象 */
    config: Seq.Keyed<string, any>; /** mext.config.js配置 */
    ignore: boolean; /** 开发环境是否忽略系统错误页面 */
    RootPageEntry: string; /** 页面入口 */
    routes: List<any>; /** 所有路由集合 */
    RootComponent: AComponentType | null; /** 入口组件 */
    RootDocumentComponent: AComponentType | null; /** 文档组件 */
    map: Seq.Keyed<string, any>; /** map列表 */
    logFilterInfo: any[]; /** log过滤关键词 */
    ErrorCatchFunction: Function | null;
    renderReactToString: Function | null;
    manifestFile: string; /** manifest文件 */
    favicon: null; /** favicon图标 */
    httpsOptions: {}; /** https配置信息 */
    /**
     *
     * ***
     * [
     *
     * `1`,`https中间件`
     *
     * `2`,`初始化数据中间件`
     *
     * `3`,`外部文件中间件`
     *
     * `4`,`静态资源中间件`
     *
     * `5`,`代理服务中间件`
     *
     * `6`,`核心参数ctx.mext注册中间件`
     *
     * ]
     * ***
     */
    middlewares: Array<Koa.Middleware<any, IContext>>;
    /**
     * 系统内置中间件
     *
     * 服务端渲染执行中间件，不能被随意销毁
     * 1. 判断是否缓存，命中缓存 cache
     * 2. 根据匹配到的地址解析对应接口数据 fetch
     * 3. 根据接口数据、匹配组件渲染出html render
     */
    coreMiddlewares: Array<Koa.Middleware<any, IContext>>;
    beforeCoreMiddlewares: Array<Koa.Middleware<any, IContext>>;
    afterCoreMiddlewares: Array<Koa.Middleware<any, IContext>>;
    /**
     * 路由参数信息
     */
    routerRoot: string;
    routerFile: string;
    /**
     * Server初始化构造函数之参数说明
     *
     * @param isProxy     标识是否启用proxy获取数据
     * @param port        指定当前服务器的端口号
     * @param ignore      忽略显示系统默认错误，仅在开发环境生效，主要用于错误页面开发
     * @param apiServer   标识当前的服务器是否仅仅可以作为一个接口数据代理服务，比如可以当作一个mock服务器或者proxy服务器
     */
    constructor({ dev, isMock, isProxy, port, ignore, apiServer, devFun }?: IServerEntry);
    /**
     * 注册中间件
     */
    registerMiddlewares(): void;
    /**
     * 开启require扩展识别，开发环境被重写
     */
    extensions(config: IConfig): void;
    /**
     * 挂载所有中间件
     */
    loadAllMiddlewares(): void;
    /**
     * 中间件
     */
    use(middleware: Koa.Middleware<any, IContext>): void;
    /**
     * 核心
     */
    core(): void;
    /**
     * 日志过滤器
     */
    logFilter(): void;
    log(cb: Function): void;
    /**
     *
     * 开发者可以根据node产生的错误进行自定义过滤出来
     *
     * 回调参数的error对象数据仅生产环境生效
     *
     * 如果没有将errLogs返回，那么将不会打印错误日志
     *
     * ```
     * app.catch(errLogs => {
     *   // 开发阶段、errLogs为null
     *   // 可以自行处理errLogs，决定是否将错误errLogs发送到终端，即打印日志
     *   return newErrLogs;
     * })
     * ```
     *
     */
    catch(cb: Function): void;
    router(root: string, routerFile: string): void;
    private handleError;
}
