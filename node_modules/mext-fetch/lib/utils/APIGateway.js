'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

const server_1 = require('mext-utils/server');

const zookeeper = require('node-zookeeper-client');

const apiGatewayConfig = require('../config/apiGateway');

const log_1 = require('./log');

class APIGateway {
  constructor(inner_southgate) {
    this.index = 0;
    this.servers = [];
    this.INNER_SOUTHGATE = inner_southgate;
    const { fetch: fetchConfig } = server_1.getMextConfig();
    Object.assign(apiGatewayConfig, fetchConfig && fetchConfig.apiGateway);
    const { PATH, INNER_SOUTHGATE } = apiGatewayConfig;
    this.config = apiGatewayConfig;
    this.INNER_SOUTHGATE = this.INNER_SOUTHGATE || INNER_SOUTHGATE;
    this.PATH = PATH;
  }

  getApiServer(path) {
    return new Promise((resolve, reject) => {
      if (this.servers && this.servers.length > 0) {
        resolve(this.pickServer());
      } else {
        if (this.INNER_SOUTHGATE) {
          const zkClient = zookeeper.createClient(this.INNER_SOUTHGATE);

          if (this.config.digestAuth) {
            zkClient.addAuthInfo('digest', Buffer.from(this.config.digestAuth));
          }

          let state = false;
          zkClient.on('state', st => {
            if (st === zookeeper.State.SYNC_CONNECTED) {
              state = true;
              console.info('Client state is changed to connected.');
            }
          });
          zkClient.once('connected', () => {
            console.info('[APIGateWay]Connected to ZooKeeper.');
            this.listChildren(zkClient, resolve, reject, path);
          });
          zkClient.connect();
          setTimeout(() => {
            if (!state) {
              reject(new Error('zkClient contented fail'));
            }
          }, 3000);
        } else {
          reject(new Error('zkClient contented fail'));
        }
      }
    });
  }

  listChildren(client, resolve, reject, tpath) {
    const path = tpath || this.PATH;
    console.info('[apiGateway getChildren] start.');
    client.getChildren(
      path,
      event => {
        console.info('[apiGateway update]Got watcher event: %s', event);
        this.listChildren(client, null, null, tpath);
      },
      (error, children) => {
        if (error) {
          log_1.default.error(`Failed to list children of ${path} due to: ${error}.`, 'APIGateWay');

          if (reject) {
            reject('[APIGateWay]Failed to list children');
          }
        } else {
          this.servers = children;
          this.index = 0;
          console.info('[APIGateWay]API Gateway Server loaded', children);

          if (resolve) {
            resolve(this.pickServer());
          }
        }
      }
    );
  }

  pickServer() {
    if (this.servers == null || this.servers.length === 0) {
      log_1.default.error('No API gateway instance is avaliable.', 'APIGateWay');
    } // Round Robin

    const result = this.servers[this.index];
    this.index++;

    if (this.index >= this.servers.length) {
      this.index = 0;
    }

    return result;
  }
}

exports.default = APIGateway;
