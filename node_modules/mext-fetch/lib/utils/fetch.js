'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

const fetch = require('isomorphic-fetch');

const defaultsDeep = require('lodash/defaultsDeep');

const isString = require('lodash/isString');

const some = require('lodash/some');

const transformRequest_1 = require('./transformRequest');

const xhr_1 = require('./xhr');

function parseJSON(response) {
  try {
    return xhr_1.checkStatus(response).json();
  } catch (error) {
    return response;
  }
}

function parseText(response) {
  try {
    return xhr_1.checkStatus(response).text();
  } catch (error) {
    return response;
  }
}

function parseObject(response) {
  if (typeof response === 'string') {
    try {
      return JSON.parse(response);
    } catch (error) {}
  }

  return response;
}

function parseXhrJSON(data) {
  if (typeof data === 'string') {
    try {
      return JSON.parse(data);
    } catch (error) {}
  }

  return data;
}

const defaultOptions = {
  method: 'get',
  dataType: 'json',
  // 允许跨域
  credentials: 'include',
  mode: 'cors',
  // request data format
  // object --> string
  transformRequest: transformRequest_1.default,
  transformResponse: parseJSON,
  headers: {
    'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'
  }
};
/**
 * 是否需要xhr（使用了不支持fetch的功能）
 */

function needXHR(opt) {
  return (
    process.env.RUN_ENV === 'web' &&
    some(['xhr', 'onDownloadProgress', 'onUploadProgress', 'timeout'], v => opt[v])
  );
}

function mergeOptions(_options, defaultOpt) {
  const options = defaultsDeep(_options, defaultOpt);
  const { method, body, params, data, transformRequest: transform, dataType } = options;

  if (method.toLowerCase() === 'get') {
    // get请求支持数据传递，优先级 params > data > body
    const temp = transform(params || data || body);
    options.params = temp ? `?${temp}` : '';
    delete options.body;
  } else {
    // 非get请求，params get数据
    // body 请求体，优先级 data > body
    const temp = transform(params);
    options.params = temp ? `?${temp}` : '';
    options.body = transform(data || body, dataType);

    if (!isString(options.body)) {
      // 文件等默认识别content-type
      delete options.headers['Content-Type'];
    } else if (dataType === 'json') {
      options.headers['Content-Type'] = 'application/json';
    }
  }

  if (needXHR(options) && dataType === 'json') {
    options.transformResponse = parseXhrJSON;
  }

  if (dataType === 'string' || dataType === 'text') {
    options.transformResponse = parseText;
  }

  if (dataType === 'object') {
    options.transformResponse = parseObject;
  }

  return options;
}
/**
 * web client fetch
 * @param  {[object]} options fetch参数
 */

exports.default = options => {
  const opts = mergeOptions(options, defaultOptions);
  const { url, params, transformResponse } = opts;

  if (needXHR(opts)) {
    return xhr_1.default(opts);
  }

  return fetch(`${encodeURI(url)}${params}`, opts).then(transformResponse);
};
