'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
/* eslint-disable no-param-reassign */

const isString = require('lodash/isString');

const reduce = require('lodash/reduce');

const log_1 = require('./utils/log');

const thriftUtils = require('./utils/thrift'); // 防止开发环境模块重新载入

const constant_1 = require('./utils/constant'); // fetch 拦截器

const _interceptors = {
  request: [],
  response: []
};
/**
 * Requests a URL, returning a promise.
 * @param  {object} [options] The options we want to pass to "fetch"
 * @param  {object} [otherOptions] 保持和apis一致的使用方式，二参数位option
 * @return {object}           An object containing either "data" or "err"
 */

async function mextFetch(options, otherOptions) {
  if (isString(options)) {
    options = {
      url: options
    };
  }

  if (!options.url) {
    return Promise.reject(new Error('url empty'));
  }

  if (otherOptions) {
    Object.assign(options, otherOptions);
  }

  options = reduce(
    _interceptors.request,
    (req, interceptor) => {
      const result = interceptor(req);

      if (result) {
        return result;
      } else {
        return req;
      }
    },
    options
  );
  let response;
  options.basename = mextFetch.basename; // 环境判断

  if (process.env.RUN_ENV === 'node') {
    const { thrift } = options;

    if (thrift) {
      response = require('./env/thrift')(options, thriftUtils);
    } else {
      response = require('./env/server')(options);
    }
  } else if (process.env.WEB_TYPE === 'WEB_SPA') {
    // 单页应用开发环境
    if (Number(process.env.Browser) === 1) {
      // 这里走websocket
      response = require('./env/file')(options);
    } else {
      // 这里是web端
      response = require('./env/web')(options);
    }
  } else {
    // 这里是在线的web端
    response = require('./env/web')(options);
  }

  return response.then(data => {
    return reduce(
      _interceptors.response,
      (res, interceptor) => {
        const result = interceptor(res);

        if (result) {
          return result;
        } else {
          return res;
        }
      },
      data
    );
  });
}

const interceptors = {
  request: {
    use: func => {
      _interceptors.request.push(func);
    }
  },
  response: {
    use: func => {
      _interceptors.response.push(func);
    }
  }
};
exports.interceptors = interceptors; // 同时处理多个fetch
// {
//   a: fetchFunc1,
//   b: fetchFunc2,
// }
// ====> Promise
// {
//   a: fetchRes1,
//   b: fetchRes2,
// }

function all(fetches) {
  return fetches;
}

exports.all = all; // 取消fetch，目前仅支持xhr取消

const source = () => {
  let cancelResolve;
  return {
    token: {
      promise: new Promise(resolve => {
        cancelResolve = resolve;
      })
    },
    cancel: msg => {
      cancelResolve(msg);
    }
  };
};

exports.source = source;

const setLog = customLog => {
  log_1.set(customLog);
};

exports.setLog = setLog;
mextFetch.interceptors = interceptors;
mextFetch.all = all;
mextFetch.source = source;
mextFetch.setLog = setLog; // 变量

mextFetch.COMMON_ERROR = constant_1.COMMONERROR;
mextFetch.ABORT_ERROR = constant_1.ABORTERROR;
/** 指定是否需要启用当前basename */

mextFetch.basename = false;
exports.default = mextFetch;
