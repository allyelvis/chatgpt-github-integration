'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

const server_1 = require('mext-utils/server');

const values = require('lodash/values');

const thriftPool = require('node-thrift-pool');

const isPlainObject = require('lodash/isPlainObject');

const APIGateway_1 = require('../../utils/APIGateway');

const DefaultfetchConfig = require('../../config/thrift');

const server_2 = require('../server/server');

const log_1 = require('../../utils/log'); // 缓存不同thriftKey的连接池

const thriftClients = {};
/**
 * 请求参数转换成thrift要求的格式
 * @param  {[object]} data [请求参数]
 * @param  {[object]} types [thrift types]
 * @return {[object]}      [thrift格式]
 */

const formatData = (data, thriftRequestModel, types) => {
  if (!isPlainObject(data)) {
    return null;
  }

  return thriftRequestModel ? new types[thriftRequestModel](data) : values(data)[0];
};
/**
 * 获取thrift服务器域名 or IP
 */

const getThriftServer = path => {
  const { fetch: fetchConfig = {} } = server_1.getMextConfig();
  Object.assign(DefaultfetchConfig, fetchConfig && fetchConfig.thrift);
  const { API_APIGATEWAY_OPEN, API_APIGATEWAY_IP, DOMAIN, PORT } = DefaultfetchConfig;

  if (API_APIGATEWAY_OPEN) {
    const APIGatewayInstance = new APIGateway_1.default(API_APIGATEWAY_IP);
    return APIGatewayInstance.getApiServer(path).then(apiGatewayServerIP => {
      return apiGatewayServerIP;
    });
  }

  return Promise.resolve(DOMAIN + ':' + PORT);
};

exports.default = (options, thriftUtils) => {
  const { fetch: fetchConfig = {} } = server_1.getMextConfig();
  Object.assign(DefaultfetchConfig, fetchConfig && fetchConfig.thrift);
  const {
    THRIFT_OPEN,
    API_APIGATEWAY_PATH,
    THRIFT_MAX_CONNECTIONS,
    TTL,
    IDLE_TIMEOUT,
    TIMEOUT
  } = DefaultfetchConfig;

  if (THRIFT_OPEN) {
    return new Promise((resolve, reject) => {
      const thrift = require('thrift');

      const transport = thrift.TFramedTransport;
      const protocol = thrift.TCompactProtocol;
      const { data, params, body, thrift: thriftKey, thriftMethod, thriftRequestModel } = options;
      const { actions, types } = thriftUtils.getClients(thriftKey);
      getThriftServer(API_APIGATEWAY_PATH).then(addr => {
        try {
          if (!addr) {
            throw new Error('no thrift host find');
          }

          const [host, port] = addr.split(':');
          let client = thriftClients[thriftKey];

          if (!client) {
            // 连接池
            client = thriftClients[thriftKey] = thriftPool(
              thrift,
              actions,
              {
                host,
                port,
                max_connections: THRIFT_MAX_CONNECTIONS,
                ttl: TTL,
                idle_timeout: IDLE_TIMEOUT
              },
              {
                transport,
                protocol,
                timeout: TIMEOUT
              }
            );
          }

          const fetchData = formatData(data || params || body, thriftRequestModel, types);

          const callback = (err, re) => {
            if (err) {
              log_1.default.error(err, 'fetch-to-thrift-err');
              server_2
                .default(options)
                .then(resolve)
                .catch(reject);
              thriftClients[thriftKey] = null;
            } else {
              resolve(re);
            }
          };

          if (fetchData) {
            client[thriftMethod](fetchData, callback);
          } else {
            client[thriftMethod](callback);
          }
        } catch (e) {
          log_1.default.error(e, 'thriftPool-connnect-error'); // thrift连接失败 换http请求

          server_2
            .default(options)
            .then(resolve)
            .catch(reject);
          thriftClients[thriftKey] = null;
        }
      });
    });
  }

  return server_2.default(options);
};
