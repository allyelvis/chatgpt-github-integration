import { IOpt1, IOptUserBase } from './interfaces/fetchOptions';
/**
 * Requests a URL, returning a promise.
 * @param  {object} [options] The options we want to pass to "fetch"
 * @param  {object} [otherOptions] 保持和apis一致的使用方式，二参数位option
 * @return {object}           An object containing either "data" or "err"
 */
declare function mextFetch(options: string | IOpt1, otherOptions?: IOptUserBase): Promise<any>;
declare namespace mextFetch {
    var interceptors: {
        request: {
            use: (func: Function) => void;
        };
        response: {
            use: (func: Function) => void;
        };
    };
    var all: typeof import(".").all;
    var source: () => {
        token: {
            promise: Promise<unknown>;
        };
        cancel: (msg?: string | undefined) => void;
    };
    var setLog: (customLog: {
        error: Function;
    }) => void;
    var COMMON_ERROR: string;
    var ABORT_ERROR: string;
    var basename: boolean;
}
declare const interceptors: {
    request: {
        use: (func: Function) => void;
    };
    response: {
        use: (func: Function) => void;
    };
};
declare function all(fetches: any): any;
declare const source: () => {
    token: {
        promise: Promise<unknown>;
    };
    cancel: (msg?: string | undefined) => void;
};
declare const setLog: (customLog: {
    error: Function;
}) => void;
export { interceptors, all, source, setLog };
export default mextFetch;
