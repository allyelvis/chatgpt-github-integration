'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
/* eslint-disable no-param-reassign */

/**
 * 错误处理
 */

const React = require('react');

const hoistNonReactStatics = require('hoist-non-react-statics'); // 这里是组件

let CaptureComponent = null; // 显示错误的组件

const ErrorComponent = props => {
  if (process.env.NODE_ENV === 'production') {
    return React.createElement(
      'p',
      null,
      '\u65E0\u6CD5\u8BBF\u95EE\u6B64\u7F51\u7AD9\uFF0C\u8BF7\u7A0D\u540E\u518D\u8BD5'
    );
  } else {
    // 没有设置错误组件，返回默认提示
    return React.createElement(
      'div',
      null,
      React.createElement(
        'style',
        null,
        `
          .errorInfo{
            background-color:#fff;
            padding: 30px;
            font-size: 14px;
            position: fixed;
            width: 100%;
            height: 100%;
            top: 0;
            left: 0;
          }
          .errorInfo .info{
            padding: 2px 4px;
            font-size: 90%;
            color: #c0341d;
            background-color: #fcedea;
            border-radius: 3px;
          }
          .errorDetail{
            line-height: 36px;
            margin-top: 20px;
          }
          pre{
            background-color: #000;
            color: #fff;
            padding: 10px 20px;
            border-radius: 5px;
            margin-top: 10px;
            height: 20%;
            overflow: auto;
            margin-right: 80px;
          }
          `
      ),
      React.createElement(
        'div',
        {
          className: 'errorInfo'
        },
        React.createElement(
          'div',
          {
            className: 'errorDetail'
          },
          React.createElement(
            'strong',
            null,
            '\u4EE5\u4E0B\u5185\u5BB9\u53EA\u6709\u5728\u6761\u4EF6',
            React.createElement(
              'b',
              {
                className: 'info'
              },
              "process.env.NODE_ENV !== 'production'"
            ),
            '\u6210\u7ACB\u65F6\u663E\u793A'
          )
        ),
        React.createElement(
          'code',
          null,
          React.createElement(
            'pre',
            null,
            `
// 当前错误原因
status: ${props.status},
message: ${props.message},
stack: ${props.stack},
info: ${JSON.stringify(props.info)},
url: ${props.url},
routerError: ${props.routerError},
data: ${JSON.stringify(props.data)},
                `
          )
        ),
        React.createElement(
          'div',
          {
            className: 'errorDetail'
          },
          React.createElement(
            'p',
            null,
            '\u5F53\u524D\u6E32\u67D3\u51FA\u73B0\u9519\u8BEF\uFF0C\u8BF7\u6307\u5B9A',
            React.createElement(
              'b',
              {
                className: 'info'
              },
              '\u9519\u8BEF\u7EC4\u4EF6'
            ),
            '\u5BF9\u9519\u8BEF\u8FDB\u884C\u53CB\u597D\u5C55\u793A'
          )
        ),
        React.createElement(
          'code',
          null,
          React.createElement(
            'pre',
            null,
            `
// 指定错误组件
import { start } from 'mext';

// app是根组件
// error是错误组件
// 用来显示当前页面渲染出错时展示的内容
start(app, error);
                `
          )
        )
      )
    );
  }
};
/**
 * 处理错误说明
 *
 *    error       当前抛出的详情错误内容
 *    this        服务端this对象时ctx
 */

async function handleError(error, showLoading = null) {
  if (process.env.RUN_ENV === 'web') {
    console.error(error);
  }

  const message = error.message ? error.message : null;
  const stack = error.stack ? error.stack : null;
  const { status = 500, info = {}, url = null, routerError = true, ...rests } = error;
  error = { ...rests, status, message, stack, info, url, routerError, data: {} };
  const ctx = {
    error,
    req: this,
    loading: null
  };
  Object.defineProperty(ctx, 'loading', {
    set(value) {
      if (showLoading) {
        showLoading(value);
      }

      this.val = value;
    },

    get() {
      return this.val;
    }
  });

  if (CaptureComponent) {
    if (CaptureComponent.getInitialProps) {
      error.data = await CaptureComponent.getInitialProps(ctx);
    }
  }

  return error;
}

exports.handleError = handleError;

exports.capture = Component => {
  // 高阶组件包裹didcatch
  CaptureComponent = class extends React.Component {
    constructor(props) {
      super(props);
      this.state = {
        error: null
      };
    }

    componentDidCatch(error) {
      // 错误页面渲染出现错误
      const message = error.message ? error.message : null;
      this.setState({
        error: {
          message
        }
      });
    }

    render() {
      if (this.state.error) {
        return React.createElement(ErrorComponent, Object.assign({}, this.state.error));
      }

      if (React.isValidElement(Component)) {
        return React.cloneElement(Component, { ...this.props });
      }

      return React.createElement(Component, Object.assign({}, this.props));
    }
  };
  hoistNonReactStatics(CaptureComponent, Component);
};

exports.shot = () => CaptureComponent || ErrorComponent;

exports.default = {
  // 处理错误信息
  capture: exports.capture,
  handleError,
  shot: exports.shot
};
