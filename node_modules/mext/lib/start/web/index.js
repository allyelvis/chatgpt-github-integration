'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
/* eslint-disable no-param-reassign */

/**
 * Mext客户端核心代码
 */

const React = require('react');

const ReactDOM = require('react-dom');

const Loadable = require('react-loadable');

const loadParams_1 = require('mext-utils/loadParams');

const createContext_1 = require('./createContext');

const initial_state_1 = require('../../shared/initial_state');

const client_1 = require('mext-plugin/client'); // 初始化路由

let routes;

const parseComponent = Component => {
  let parse;

  if (process.env.NODE_ENV === 'development') {
    if (routes && routes.length) {
      parse = require('../../modules/MultiplePage');
    } else {
      parse = require('../../modules/SinglePage');
    }
  } else {
    if (process.env.USE_ROUTE === '1') {
      parse = require('../../modules/MultiplePage');
    } else {
      parse = require('../../modules/SinglePage');
    }
  }

  return parse(Component, initial_state_1.INITIAL_STATE, routes);
}; // 给元素添加remove polyfill
// 针对IE8及其以下的，请自行添加Object polyfill进行处理

(function(arr) {
  arr.forEach(function(item) {
    if (item.hasOwnProperty('remove')) {
      return;
    }

    Object.defineProperty(item, 'remove', {
      configurable: true,
      enumerable: true,
      writable: true,
      value: function remove() {
        if (this.parentNode === null) {
          return;
        }

        this.parentNode.removeChild(this);
      }
    });
  });
})([Element.prototype, CharacterData.prototype, DocumentType.prototype]);

const startWeb = async (Component, hot = null) => {
  if (!document.getElementById('mext')) {
    document.body.innerHTML = '不存在名称为【mext】的id选择器';
  } else {
    // 延迟执行-预加载
    await new Promise(resolve => resolve());
    initial_state_1.default();
    await Loadable.preloadAll();
    /**
     * 服务端渲染会存在id 为 __URL__的选择器
     */

    const __URL__ = document.getElementById('__URL__');

    let ssr = false;
    let render = ReactDOM.render;

    if (__URL__) {
      ssr = true;

      const value = __URL__.getAttribute('data-loadable');

      if (value && Number(value) === 0) {
        render = ReactDOM.hydrate;
      }

      if (process.env.NODE_ENV !== 'development') {
        __URL__.remove();
      }
    } // 读取路由数据

    routes = window.__MEXT__INIT__ROUTES__ || []; // 存储全局变量

    loadParams_1.default.set({
      firstRender: true,
      ssr,
      routes
    }); // 生产环境清除全局变量标记

    if (process.env.NODE_ENV !== 'development') {
      delete window.__MEXT__INIT__ROUTES__;
      delete window.__INITIAL_STATE__;
    } // 渲染组件

    const ComponentType = await parseComponent(Component); // 如果发现有路由需要客户端渲染，那么需要使用ReactDOM.render

    if (ComponentType.needClient) {
      render = ReactDOM.render;
    }

    const RootComponent = createContext_1.default({
      Component: ComponentType,
      INITIAL_STATE: initial_state_1.INITIAL_STATE
    });

    if (process.env.NODE_ENV === 'development') {
      hot && hot(ComponentType);
      hot && hot(RootComponent);
    }

    render(React.createElement(RootComponent, null), document.getElementById('mext'), () => {
      loadParams_1.default.set({
        firstRender: false
      });
      client_1.default.hooks.rendered({
        Component
      });
    });
  }
};

module.exports = startWeb;
