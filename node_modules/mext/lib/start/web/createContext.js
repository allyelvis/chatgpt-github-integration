'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

const React = require('react');

const MextContext_1 = require('mext-utils/MextContext');

const setMext_1 = require('mext-utils/setMext');

const setMext_2 = require('../../setMext');

const removeMext_1 = require('../../removeMext');

let hmrMextValue = {};

const Abort = RootComponent =>
  class MextAbort extends React.Component {
    shouldComponentUpdate() {
      return false;
    }

    render() {
      return React.createElement(RootComponent, null);
    }
  };
/**
 * 创建两个context, 后续combineContextType
 * @param MextContext this.state.mext
 */

exports.default = ({ Component, INITIAL_STATE }) => {
  // Provider层禁用渲染
  const AbortComponent = Abort(Component);
  return class Mext extends React.Component {
    constructor(props) {
      super(props);
      let pass = true;

      if (process.env.NODE_ENV === 'development') {
        if (window.mext_hmr) {
          pass = false;
        }
      }

      if (pass) {
        hmrMextValue = INITIAL_STATE.mext;
      }

      this.state = {
        mext: hmrMextValue
      };

      if (process.env.RUN_ENV === 'web') {
        if (process.env.NODE_ENV === 'development') {
          if (window.mext_hmr) {
            setMext_2.clean();
            removeMext_1.clean();
          }
        }

        this.setMext = this.setMext.bind(this);
        setMext_1.default.set(this.setMext);
        setMext_2.default(this.setMext);
        removeMext_1.default(this.removeMext.bind(this));
      }
    }

    componentDidMount() {
      if (process.env.NODE_ENV === 'development') {
        if (window.mext_hmr) {
          console.info('移除mext_hmr');
          delete window.mext_hmr;
        }
      }
    }
    /**
     * this.setMext({'name':2})
     */

    setMext(obj = {}) {
      if (obj.constructor === Object && Object.keys(obj).length) {
        hmrMextValue = { ...this.state.mext, ...obj };
        this.setState({
          mext: hmrMextValue
        });
      } else {
        console.warn('setMext必须接受一个不为空的对象');
      }
    }
    /**
     * this.removeMext('name')
     */

    removeMext(key) {
      if (this.state.mext[key]) {
        delete this.state.mext[key];
        this.setState({
          mext: { ...this.state.mext }
        });
      } else {
        console.warn(`removeMext移除的【${key}】不存在`);
      }
    }

    render() {
      return React.createElement(
        MextContext_1.default.Provider,
        {
          value: this.state.mext
        },
        React.createElement(AbortComponent, null)
      );
    }
  };
};
