'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
/**
 * 无路由单页应用
 */

const React = require('react');

const Exception_1 = require('mext-utils/Exception');

const client_1 = require('mext-plugin/client');

const loadParams_1 = require('mext-utils/loadParams');

const load_1 = require('./load');

module.exports = async (Component, INITIAL_STATE) => {
  let pass = true; // webpack会删除该段代码

  if (process.env.NODE_ENV === 'development') {
    if (window.mext_hmr) {
      pass = false;
    }
  }

  if (pass) {
    // 执行初始化插件
    await client_1.default.hooks.init({
      Component,
      INITIAL_STATE,
      match_routes: []
    });
  }

  const { ssr } = loadParams_1.default.get(); // 仅客户端渲染时加载数据

  if (!ssr && pass) {
    await load_1.default(Component, INITIAL_STATE);
  }

  return class MextApp extends React.Component {
    constructor(props) {
      super(props);
      this.reload = false;
      let errorInfo = null;

      if (process.env.NODE_ENV === 'development') {
        if (window.mext_hmr && window.mext_hmr_error) {
          // 热更新
          errorInfo = window.mext_hmr_error;
        }
      }

      if (!errorInfo) {
        // 正常渲染
        errorInfo = INITIAL_STATE.MextException || null;
      }

      this.state = {
        errorInfo,
        loading: null,
        data: INITIAL_STATE.mext
      };
    }

    async componentDidCatch(error) {
      client_1.default.hooks.catchError({
        type: 'global',
        error
      });
      const message = error.message ? error.message : null;
      const stack = error.stack ? error.stack : null;
      const errorInfo = await Exception_1.default.handleError.call(
        null,
        {
          message,
          stack,
          routerError: false
        },
        component => {
          this.setState({
            loading: component
          });
        }
      );

      if (process.env.NODE_ENV === 'development') {
        window.mext_hmr_error = errorInfo;
      }

      this.setState({
        errorInfo,
        loading: null
      });
    }

    async componentDidMount() {
      // 根据配置再加载数据更新节点
      let updateProps = false;

      if (typeof Component.updateProps === 'boolean') {
        updateProps = Component.updateProps;
      } else if (typeof Component.updateProps === 'function') {
        updateProps = await Component.updateProps({ ...INITIAL_STATE });
      }

      if (updateProps) {
        await load_1.default(Component, INITIAL_STATE);
        this.setState({
          errorInfo: INITIAL_STATE.MextException || null,
          data: INITIAL_STATE.mext
        });
      }
    }

    render() {
      this.reload = false;

      if (this.state.loading) {
        const { loading } = this.state;

        if (React.isValidElement(loading)) {
          return React.cloneElement(loading, { ...this.props });
        }

        if (typeof loading === 'function') {
          return React.createElement(loading, { ...this.props });
        }

        return null;
      }

      if (this.state.errorInfo) {
        const ErrorComponent = Exception_1.default.shot();
        return React.createElement(ErrorComponent, Object.assign({}, this.state.errorInfo));
      }

      if (this.state.data.hasOwnProperty('reloadInitialProps')) {
        throw new Error('reloadInitialProps这是系统关键字，请不要使用该名称作为key');
      }

      const reloadInitialProps = async () => {
        if (!this.reload) {
          this.reload = true;
          await load_1.default(Component, INITIAL_STATE);
          this.setState({
            errorInfo: INITIAL_STATE.MextException || null,
            data: INITIAL_STATE.mext
          });
        } else {
          console.warn('当前根组件正在执行reloadInitialProps函数，请等待执行完毕！');
        }
      };

      return React.createElement(
        Component,
        Object.assign({}, this.state.data, {
          reloadInitialProps: reloadInitialProps
        })
      );
    }
  };
};
