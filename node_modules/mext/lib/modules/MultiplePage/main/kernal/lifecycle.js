'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
/**
 * 处理路由所有生命周期
 * routeWillLeave
 * routerWillUpdate
 * routerDidUpdate
 */

const common_1 = require('./common');

const index_1 = require('./lifecycle/index');

const init_1 = require('./lifecycle/init');

const routeChanged_1 = require('./lifecycle/routeChanged');

const routeWillLeave_1 = require('./lifecycle/routeWillLeave');

const redirect_1 = require('./lifecycle/redirect');

const routerWillUpdate_1 = require('./lifecycle/routerWillUpdate');

const bundleAndData_1 = require('./lifecycle/bundleAndData');

const renderRoute_1 = require('./lifecycle/renderRoute');

class RouterLifeCycle extends common_1.default {
  /**
   * 通过独立的LifyCycle中间件类来处理每一次路由跳转
   * 通过中间件实现了变量参数隔离，防止快速切换导致全局的变量被更新掉了
   */
  async getUserConfirmation(promptMessage, cb) {
    /** 实例化中间件模型 */
    let app = new index_1.default();
    /** 初始化数据 */

    app.use(init_1.default.call(this, promptMessage, cb));
    /** 确认当前路由是否发生变化 */

    app.use(routeChanged_1.default.call(this));
    /** 路由组件离开触发逻辑处理 */

    app.use(routeWillLeave_1.default.call(this));
    /** 跳转目标路由地址重定向分析 */

    app.use(redirect_1.default.call(this));
    /** 路由将要开始跳转了，触发全局钩子处理 */

    app.use(routerWillUpdate_1.default.call(this));
    /** 路由跳转中，加载bundle.js和目标路由的数据等 */

    app.use(bundleAndData_1.default.call(this));
    /** 路由处理完毕，开始渲染路由了 */

    app.use(renderRoute_1.default.call(this));
    /** 开始执行逻辑 */

    app.listen();
    /** 清除缓存 */

    app = null;
  }
}

exports.default = RouterLifeCycle;
