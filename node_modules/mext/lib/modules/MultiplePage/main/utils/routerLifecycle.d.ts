interface IRouteInfo {
    match_routes: Array<any>;
    location: any;
}
/**
 * 路由切换前钩子说明
 *
 * to 表示目标路由对象
 *
 *  from 表示来源，如果没有来源，比如非服务端渲染，刷新页面首次进入，默认为null
 *
 * 如果to和from都有意义，那么两者的数据结构是一致的
 *
 * history 表示react-router的跳转形式
 *
 * to和from数据格式
 *
 * 使用方式
 *
 * ```js
 *  // mext核心调用
 *  await routerWillUpdate({ to, from, history, data })
 *
 *  // 开发者使用
 *  // 根组件定义静态方法
 *  static routerWillUpdate(to, from, next, data){
 *  // 只有执行next才会进行下一步路由切换的动作
 *    next()
 *  }
 *  ```
 */
export declare function routerWillUpdate({ to, from, history, data }: {
    to: IRouteInfo;
    from: any;
    history: any;
    data: any;
}): Promise<unknown>;
export declare namespace routerWillUpdate {
    var set: (Component: any) => void;
}
export declare function routerDidUpdate({ to, from, data }: any): void;
export declare namespace routerDidUpdate {
    var set: (Component: any) => void;
}
declare const _default: {
    routerWillUpdate: typeof routerWillUpdate;
    routerDidUpdate: typeof routerDidUpdate;
};
export default _default;
