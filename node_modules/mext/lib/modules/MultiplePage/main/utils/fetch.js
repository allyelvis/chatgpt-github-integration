'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
/**
 * 这里是服务于单页面应用初始化页面时候的函数实现
 */

const mext_utils_1 = require('mext-utils');

const client_1 = require('mext-plugin/client');

const setMext_1 = require('../../../../setMext');

exports.default = async (Component, match_routes, INITIAL_STATE, routes) => {
  const searchInfo = mext_utils_1.search();
  const { ssr } = mext_utils_1.loadParams.get();
  const query = mext_utils_1.queryObj(searchInfo);
  let needInitialRoutes = [];

  try {
    needInitialRoutes = match_routes.filter(
      match_route => (!ssr && match_route.route.needInitiProps) || match_route.route.client
    );

    if (needInitialRoutes.length || !ssr) {
      /**
       * 初始化非路由组件的数据，即挂载在入口组件的getInitialProps方法的实现
       */
      const initialPropsParams = {
        location: window.location,
        query,
        setMext: setMext_1.default,
        routes,
        route: null,
        match: null
      };
      await client_1.default.hooks.modifyInitialPropsCtx({
        params: initialPropsParams
      });

      if (Component.getInitialProps && !ssr) {
        const rootProps = await Component.getInitialProps(initialPropsParams);
        INITIAL_STATE.mext = { ...INITIAL_STATE.mext, ...rootProps };
      } // 加载下个路由对应页面的数据

      const { props } = await mext_utils_1.loadInitialProps(
        needInitialRoutes,
        searchInfo,
        initialPropsParams,
        match_routes
      );
      needInitialRoutes.forEach(item => {
        item.route.client = false;
      });

      if (Object.keys(props).length) {
        Object.assign(INITIAL_STATE, props);
      }
    } // 通过RouterSwtich绑定的回调修改数据
  } catch (err) {
    client_1.default.hooks.catchError({
      type: 'fetch',
      error: err
    });
    INITIAL_STATE.MextException = await mext_utils_1.Exception.handleError.call(null, err);
  }

  return Boolean(needInitialRoutes.length);
};
